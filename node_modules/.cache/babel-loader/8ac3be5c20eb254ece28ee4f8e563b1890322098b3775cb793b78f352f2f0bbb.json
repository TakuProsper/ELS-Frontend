{"ast":null,"code":"import axios from'axios';import jwt_decode from'jwt-decode';import dayjs from'dayjs';import{useContext}from'react';import AuthContext from'../context/AuthContext';const baseURL='http://127.0.0.1:8000/api';const useAxios=()=>{const{authTokens,setUser,setAuthTokens}=useContext(AuthContext);// Create an axios instance with default settings\nconst axiosInstance=axios.create({baseURL,headers:{Authorization:`Bearer ${authTokens===null||authTokens===void 0?void 0:authTokens.access}`}});// Request interceptor to handle token refresh\naxiosInstance.interceptors.request.use(async req=>{if(!authTokens)return req;// If no tokens, just return the request\nconst user=jwt_decode(authTokens.access);const isExpired=dayjs.unix(user.exp).diff(dayjs())<1;if(!isExpired)return req;// If token is not expired, proceed with the request\ntry{// Refresh the token\nconst response=await axios.post(`${baseURL}/token/refresh/`,{refresh:authTokens.refresh});localStorage.setItem('authTokens',JSON.stringify(response.data));// Update the context with new tokens\nsetAuthTokens(response.data);setUser(jwt_decode(response.data.access));// Update the Authorization header with the new access token\nreq.headers.Authorization=`Bearer ${response.data.access}`;}catch(error){console.error(\"Failed to refresh token:\",error);// Handle error if refresh fails (e.g., redirect to login)\n}return req;// Return the modified request\n});return axiosInstance;// Return the axios instance for use in your components\n};export default useAxios;","map":{"version":3,"names":["axios","jwt_decode","dayjs","useContext","AuthContext","baseURL","useAxios","authTokens","setUser","setAuthTokens","axiosInstance","create","headers","Authorization","access","interceptors","request","use","req","user","isExpired","unix","exp","diff","response","post","refresh","localStorage","setItem","JSON","stringify","data","error","console"],"sources":["/home/taku_prosper/Documents/GitHub/ELS-Frontend/src/utils/useAxios.js"],"sourcesContent":["import axios from 'axios';\nimport jwt_decode from 'jwt-decode';\nimport dayjs from 'dayjs';\nimport { useContext } from 'react';\nimport AuthContext from '../context/AuthContext';\n\nconst baseURL = 'http://127.0.0.1:8000/api';\n\nconst useAxios = () => {\n  const { authTokens, setUser, setAuthTokens } = useContext(AuthContext);\n\n  // Create an axios instance with default settings\n  const axiosInstance = axios.create({\n    baseURL,\n    headers: { Authorization: `Bearer ${authTokens?.access}` },\n  });\n\n  // Request interceptor to handle token refresh\n  axiosInstance.interceptors.request.use(async (req) => {\n    if (!authTokens) return req; // If no tokens, just return the request\n\n    const user = jwt_decode(authTokens.access);\n    const isExpired = dayjs.unix(user.exp).diff(dayjs()) < 1;\n\n    if (!isExpired) return req; // If token is not expired, proceed with the request\n\n    try {\n      // Refresh the token\n      const response = await axios.post(`${baseURL}/token/refresh/`, {\n        refresh: authTokens.refresh,\n      });\n      localStorage.setItem('authTokens', JSON.stringify(response.data));\n      \n      // Update the context with new tokens\n      setAuthTokens(response.data);\n      setUser(jwt_decode(response.data.access));\n\n      // Update the Authorization header with the new access token\n      req.headers.Authorization = `Bearer ${response.data.access}`;\n    } catch (error) {\n      console.error(\"Failed to refresh token:\", error);\n      // Handle error if refresh fails (e.g., redirect to login)\n    }\n\n    return req; // Return the modified request\n  });\n\n  return axiosInstance; // Return the axios instance for use in your components\n};\n\nexport default useAxios;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,UAAU,KAAM,YAAY,CACnC,MAAO,CAAAC,KAAK,KAAM,OAAO,CACzB,OAASC,UAAU,KAAQ,OAAO,CAClC,MAAO,CAAAC,WAAW,KAAM,wBAAwB,CAEhD,KAAM,CAAAC,OAAO,CAAG,2BAA2B,CAE3C,KAAM,CAAAC,QAAQ,CAAGA,CAAA,GAAM,CACrB,KAAM,CAAEC,UAAU,CAAEC,OAAO,CAAEC,aAAc,CAAC,CAAGN,UAAU,CAACC,WAAW,CAAC,CAEtE;AACA,KAAM,CAAAM,aAAa,CAAGV,KAAK,CAACW,MAAM,CAAC,CACjCN,OAAO,CACPO,OAAO,CAAE,CAAEC,aAAa,CAAE,UAAUN,UAAU,SAAVA,UAAU,iBAAVA,UAAU,CAAEO,MAAM,EAAG,CAC3D,CAAC,CAAC,CAEF;AACAJ,aAAa,CAACK,YAAY,CAACC,OAAO,CAACC,GAAG,CAAC,KAAO,CAAAC,GAAG,EAAK,CACpD,GAAI,CAACX,UAAU,CAAE,MAAO,CAAAW,GAAG,CAAE;AAE7B,KAAM,CAAAC,IAAI,CAAGlB,UAAU,CAACM,UAAU,CAACO,MAAM,CAAC,CAC1C,KAAM,CAAAM,SAAS,CAAGlB,KAAK,CAACmB,IAAI,CAACF,IAAI,CAACG,GAAG,CAAC,CAACC,IAAI,CAACrB,KAAK,CAAC,CAAC,CAAC,CAAG,CAAC,CAExD,GAAI,CAACkB,SAAS,CAAE,MAAO,CAAAF,GAAG,CAAE;AAE5B,GAAI,CACF;AACA,KAAM,CAAAM,QAAQ,CAAG,KAAM,CAAAxB,KAAK,CAACyB,IAAI,CAAC,GAAGpB,OAAO,iBAAiB,CAAE,CAC7DqB,OAAO,CAAEnB,UAAU,CAACmB,OACtB,CAAC,CAAC,CACFC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAEC,IAAI,CAACC,SAAS,CAACN,QAAQ,CAACO,IAAI,CAAC,CAAC,CAEjE;AACAtB,aAAa,CAACe,QAAQ,CAACO,IAAI,CAAC,CAC5BvB,OAAO,CAACP,UAAU,CAACuB,QAAQ,CAACO,IAAI,CAACjB,MAAM,CAAC,CAAC,CAEzC;AACAI,GAAG,CAACN,OAAO,CAACC,aAAa,CAAG,UAAUW,QAAQ,CAACO,IAAI,CAACjB,MAAM,EAAE,CAC9D,CAAE,MAAOkB,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,CAAEA,KAAK,CAAC,CAChD;AACF,CAEA,MAAO,CAAAd,GAAG,CAAE;AACd,CAAC,CAAC,CAEF,MAAO,CAAAR,aAAa,CAAE;AACxB,CAAC,CAED,cAAe,CAAAJ,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}